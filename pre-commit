#!/bin/bash

STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".go$")

if [ "$STAGED_GO_FILES" = "" ]; then
    exit 0
fi

PASS=true

for FILE in $STAGED_GO_FILES
do
    # 跳过var目录下的文件
    # shellcheck disable=SC2081
    if [ "$FILE" = "var"* ];then
        continue
    fi

    # goimports 检查并调整导入语句
    goimports -w -v "$FILE"
    # shellcheck disable=SC2181
    if [ $? != 0 ]; then
        PASS=false
    fi

    # 如果当前文件没有被格式化，就格式化它
    UN_FORMATTED=$(gofmt -l "$FILE")
    if [ "$UN_FORMATTED" != "" ];then
        gofmt -w "$PWD"/"$UN_FORMATTED"
        # shellcheck disable=SC2181
        if [ $? != 0 ]; then
            printf "gofmt error \n"
            PASS=false
        fi
    fi

    # 上述 goimports, gofmt可能会对文件作出改动，
    # 所以此处将更改提交至暂存区
    git add "$FILE"

done

# go tool vet 检查代码中的静态错误
# shellcheck disable=SC2086
go vet
# shellcheck disable=SC2181
if [ $? != 0 ]; then
    printf "vet error \n"
    PASS=false
fi

# 检测隐患变量
# 需要安装：go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
# shellcheck disable=SC2046
go vet -vettool=$(which shadow)
# shellcheck disable=SC2181
if [ $? != 0 ]; then
    printf "shadow error \n"
    PASS=false
fi

if ! $PASS; then
    printf "\033[31m COMMIT FAILED \033[0m\n"
    exit 1
else
    printf "\033[32m COMMIT SUCCEEDED \033[0m\n"
fi

exit 0
